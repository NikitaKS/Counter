{"version":3,"sources":["components/Display.js","components/Button.js","components/Buttons.js","components/SettingsDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Display","render","maxValueError","_this","props","currentValue","maxValue","displayTitle","inputError","isDisable","react_default","a","createElement","className","React","Component","Button","disableBtn","disabled","onClick","callback","title","Buttons","components_Button","incValue","value","resetValue","startValue","SettingsDisplay","changeMaxValue","e","parseInt","currentTarget","changeMinValue","errorMinValue","errorMaxValue","Object","keys","length","constructor","onChange","type","App","state","inc","setState","setSettings","components_Display","components_Buttons","components_SettingsDisplay","this","app","JSON","parse","localStorage","getItem","nextProps","nextState","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAqBeA,mNAhBXC,OAAS,WACL,IAAIC,EAAiBC,EAAKC,MAAMC,eAAiBF,EAAKC,MAAME,SAAY,WAAa,GAEjFC,EAAeJ,EAAKC,MAAMI,WACxB,gBACAL,EAAKC,MAAMK,UACTC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,uCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAWX,GAAgBC,EAAKC,MAAMC,cACnD,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVN,iCAZKO,IAAMC,YCcbC,6MAdXf,OAAS,WACL,IAAIgB,EAAad,EAAKC,MAAMc,SAC5B,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIC,UAAU,SACVM,QAAShB,EAAKC,MAAMgB,SACpBF,SAAUD,GACZd,EAAKC,MAAMiB,sCATRP,IAAMC,WCkBZO,6MAdXrB,OAAS,WACL,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACW,EAAD,CAAQH,SAAUjB,EAAKC,MAAMoB,SACrBH,MAAM,MACNH,SAAUf,EAAKC,MAAMqB,QAAUtB,EAAKC,MAAME,UAAYH,EAAKC,MAAMK,YACzEC,EAAAC,EAAAC,cAACW,EAAD,CAAQH,SAAUjB,EAAKC,MAAMsB,WACrBL,MAAM,QACNH,SAAUf,EAAKC,MAAMqB,QAAQtB,EAAKC,MAAMuB,YAAcxB,EAAKC,MAAMK,2CAVnEK,IAAMC,WCgDba,6MAhDXC,eAAiB,SAACC,GACd,IAAIL,EAAQM,SAASD,EAAEE,cAAcP,OACjCA,EAAQtB,EAAKC,MAAMuB,YAGnBxB,EAAKC,MAAMyB,eAAeJ,MAIlCQ,eAAiB,SAACH,GACd,IAAIL,EAAQM,SAASD,EAAEE,cAAcP,OACjCA,EAAQtB,EAAKC,MAAME,UAGnBH,EAAKC,MAAM6B,eAAeR,MAGlCxB,OAAS,WAEL,IAAIiC,EAAiB/B,EAAKC,MAAMuB,YAAcxB,EAAKC,MAAME,UAAYH,EAAKC,MAAMuB,WAAa,EAAK,gBAAkB,GAChHQ,EAAiBhC,EAAKC,MAAMuB,aAAexB,EAAKC,MAAME,UAAYH,EAAKC,MAAME,SAAW,EAAK,gBAAkB,GACnH,OACII,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAE6B,IAAnCuB,OAAOC,KAAKlC,EAAKC,OAAOkC,QAAgBnC,EAAKC,MAAMmC,cAAgBH,OAChE1B,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAO4B,SAAUrC,EAAK0B,eACfhB,UAAWsB,EACXV,MAAOtB,EAAKC,MAAME,SAClBmC,KAAK,YAEhB/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAOa,MAAOtB,EAAKC,MAAMuB,WAClBd,UAAWqB,EACXM,SAAUrC,EAAK8B,eACfQ,KAAK,4CAxCd3B,IAAMC,WC2GrB2B,6MA/EXC,MAAQ,KACRnB,SAAW,WACP,IAAIoB,EAAMzC,EAAKwC,MAAMlB,MACrBtB,EAAK0C,SAAS,CACVpB,QAASmB,OAGjBlB,WAAa,WACTvB,EAAK0C,SAAS,CACVpB,MAAOtB,EAAKwC,MAAMhB,gBAG1BE,eAAiB,SAACJ,GACdtB,EAAKK,WAAWiB,GAChBtB,EAAK0C,SAAS,CACVvC,SAAUmB,EACVA,MAAOtB,EAAKwC,MAAMhB,WAClBlB,WAAW,OAGnBwB,eAAiB,SAACR,GACdtB,EAAKK,WAAWiB,GAChBtB,EAAK0C,SAAS,CACVlB,WAAYF,EACZA,MAAOA,EACPhB,WAAW,OAGnBqC,YAAc,WACV3C,EAAK0C,SAAS,CACVpC,WAAW,OAGnBD,WAAa,SAACiB,GACV,IAAId,EAAIc,EACJd,IAAMR,EAAKwC,MAAMrC,UAAYK,EAAI,GAAKA,IAAMR,EAAKwC,MAAMhB,WACvDxB,EAAK0C,SAAS,CACVrC,YAAY,IAGhBL,EAAK0C,SAAS,CACVrC,YAAY,OAKxBP,OAAS,WACL,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACmC,EAAD,CAASzC,SAAUH,EAAKwC,MAAMrC,SACrBG,UAAWN,EAAKwC,MAAMlC,UACtBJ,aAAcF,EAAKwC,MAAMlB,MACzBjB,WAAYL,EAAKwC,MAAMnC,aAEhCE,EAAAC,EAAAC,cAACoC,EAAD,CAASrB,WAAYxB,EAAKwC,MAAMhB,WACvBlB,UAAWN,EAAKwC,MAAMlC,UACtBgB,MAAOtB,EAAKwC,MAAMlB,MAClBC,WAAYvB,EAAKuB,WACjBF,SAAUrB,EAAKqB,SACflB,SAAUH,EAAKwC,MAAMrC,YAElCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACqC,EAAD,CAAiB3C,SAAUH,EAAKwC,MAAMrC,SACrBE,WAAYL,EAAKwC,MAAMnC,WACvBqB,eAAgB1B,EAAK0B,eACrBI,eAAgB9B,EAAK8B,eACrBN,WAAYxB,EAAKwC,MAAMhB,aACxCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACW,EAAD,CAAQF,MAAM,MACND,SAAUjB,EAAK2C,YACf5B,UAAWf,EAAKwC,MAAMlC,WAAaN,EAAKwC,MAAMnC,oGA7FtE0C,KAAKC,IAAMC,KAAKC,MAAMC,aAAaC,QAAQ,UACvCD,aAAaC,QAAQ,SACrBL,KAAKL,SAAS,CACVpB,MAAOyB,KAAKC,IAAI1B,MAChBE,WAAYuB,KAAKC,IAAIxB,WACrBrB,SAAU4C,KAAKC,IAAI7C,SACnBG,UAAWyC,KAAKC,IAAI1C,UACpBD,WAAY0C,KAAKC,IAAI3C,aAGzB0C,KAAKL,SAAS,CACVpB,MAAO,EACPE,WAAY,EACZrB,SAAU,EACVG,WAAW,EACXD,YAAY,gDAIJgD,EAAWC,GAC3BH,aAAaI,QAAQ,QAASN,KAAKO,UAAUF,WAtBnC3C,IAAMC,WCKJ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAShE,OAAOS,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.52e1e211.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nclass Display extends React.Component {\n\n    render = () => {\n        let maxValueError = (this.props.currentValue === this.props.maxValue) ? 'maxValue' : '';\n\n        let displayTitle = this.props.inputError\n            ? 'Invalid value'\n            : this.props.isDisable ?\n                <div className='pressSet'>Please choose value and press \"set\"</div> :\n                <div className={maxValueError}>{this.props.currentValue}</div>;\n        return (\n            <div className=\"displayWrapper\">\n                {displayTitle}\n            </div>\n        );\n    }\n}\n\nexport default Display;\n\n","import React from 'react';\r\n\r\nclass Button extends React.Component {\r\n    render = () => {\r\n        let disableBtn = this.props.disabled;\r\n        return (\r\n            <div>\r\n                <button\r\n                    className='button'\r\n                    onClick={this.props.callback}\r\n                    disabled={disableBtn}\r\n                >{this.props.title}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport '../App.css';\nimport Button from \"./Button\";\n\nclass Buttons extends React.Component {\n\n    render = () => {\n        return (\n            <div className=\"buttonWrapper\">\n                <Button callback={this.props.incValue}\n                        title='INC'\n                        disabled={this.props.value === this.props.maxValue || this.props.isDisable}/>\n                <Button callback={this.props.resetValue}\n                        title='RESET'\n                        disabled={this.props.value===this.props.startValue || this.props.isDisable}/>\n            </div>\n        );\n    }\n}\n\nexport default Buttons;\n\n","import React from 'react';\nimport '../App.css';\n\nclass SettingsDisplay extends React.Component {\n    changeMaxValue = (e) => {\n        let value = parseInt(e.currentTarget.value);\n        if (value < this.props.startValue ){\n\n        } else {\n            this.props.changeMaxValue(value);\n        }\n\n    };\n    changeMinValue = (e) => {\n        let value = parseInt(e.currentTarget.value);\n        if (value > this.props.maxValue){\n\n        } else{\n            this.props.changeMinValue(value);\n        }\n    };\n    render = () => {\n\n        let errorMinValue = (this.props.startValue >= this.props.maxValue || this.props.startValue < 0) ? 'errorMinValue' : '';\n        let errorMaxValue = (this.props.startValue === this.props.maxValue || this.props.maxValue < 0) ? 'errorMaxValue' : '';\n        return (\n            <div className=\"settingsIn\">\n                {\n                    (Object.keys(this.props).length === 0 && this.props.constructor === Object) ?\n                        <div>1</div> :\n                        <div className='settings'>\n                            <div className='maxValueBlock'>\n                                <span>Max Value</span>\n                                <input onChange={this.changeMaxValue}\n                                       className={errorMaxValue}\n                                       value={this.props.maxValue}\n                                       type=\"number\"/>\n                            </div>\n                            <div className='minValueBlock'>\n                                <span>Min Value</span>\n                                <input value={this.props.startValue}\n                                       className={errorMinValue}\n                                       onChange={this.changeMinValue}\n                                       type=\"number\"/>\n                            </div>\n                        </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default SettingsDisplay;\n\n","import React from 'react';\nimport './App.css';\nimport Display from \"./components/Display\";\nimport Buttons from \"./components/Buttons\";\nimport SettingsDisplay from \"./components/SettingsDisplay\";\nimport Button from \"./components/Button\";\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.app = JSON.parse(localStorage.getItem('state'));\n        if (localStorage.getItem('state')) {\n            this.setState({\n                value: this.app.value,\n                startValue: this.app.startValue,\n                maxValue: this.app.maxValue,\n                isDisable: this.app.isDisable,\n                inputError: this.app.inputError,\n            })\n        } else {\n            this.setState({\n                value: 0,\n                startValue: 0,\n                maxValue: 6,\n                isDisable: false,\n                inputError: false,\n            })\n        }\n    }\n    componentWillUpdate(nextProps, nextState) {\n        localStorage.setItem('state', JSON.stringify(nextState));\n    }\n    state = {};\n    incValue = () => {\n        let inc = this.state.value;\n        this.setState({\n            value: ++inc\n        });\n    };\n    resetValue = () => {\n        this.setState({\n            value: this.state.startValue\n        });\n    };\n    changeMaxValue = (value) => {\n        this.inputError(value);\n        this.setState({\n            maxValue: value,\n            value: this.state.startValue,\n            isDisable: true\n        });\n    };\n    changeMinValue = (value) => {\n        this.inputError(value);\n        this.setState({\n            startValue: value,\n            value: value,\n            isDisable: true\n        });\n    };\n    setSettings = () => {\n        this.setState({\n            isDisable: false\n        });\n    };\n    inputError = (value) => {\n        let a = value;\n        if (a === this.state.maxValue || a < 0 || a === this.state.startValue) {\n            this.setState({\n                inputError: true\n            })\n        } else {\n            this.setState({\n                inputError: false\n            })\n        }\n    };\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <div className=\"countWrapper\">\n                    <Display maxValue={this.state.maxValue}\n                             isDisable={this.state.isDisable}\n                             currentValue={this.state.value}\n                             inputError={this.state.inputError}\n                    />\n                    <Buttons startValue={this.state.startValue}\n                             isDisable={this.state.isDisable}\n                             value={this.state.value}\n                             resetValue={this.resetValue}\n                             incValue={this.incValue}\n                             maxValue={this.state.maxValue}/>\n                </div>\n                <div className='settingsWrapper'>\n                    <SettingsDisplay maxValue={this.state.maxValue}\n                                     inputError={this.state.inputError}\n                                     changeMaxValue={this.changeMaxValue}\n                                     changeMinValue={this.changeMinValue}\n                                     startValue={this.state.startValue}/>\n                    <div className='buttonWrapper'>\n                        <Button title='SET'\n                                callback={this.setSettings}\n                                disabled={!this.state.isDisable || this.state.inputError}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}